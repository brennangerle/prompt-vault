rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidPrompt() {
      let data = request.resource.data;
      let isTeamPrompt = data.sharing == 'team';
      let hasRequiredFields = data.keys().hasAll(['title', 'content', 'tags', 'sharing', 'userId']);

      return hasRequiredFields &&
             data.title is string &&
             data.content is string &&
             data.tags is list &&
             data.sharing in ['private', 'team', 'global'] &&
             (isTeamPrompt ? data.keys().has('teamId') && data.teamId is string : true);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Prompts collection
    match /prompts/{promptId} {
      // Read rules based on sharing settings
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || // Owner can always read
        resource.data.sharing == 'global' || // Anyone authenticated can read global prompts
        (resource.data.sharing == 'team' && resource.data.teamId == request.auth.token.teamId) // Team members can read team prompts
      );
      
      // Create rule - must be authenticated and valid
      allow create: if isAuthenticated() && 
                      isValidPrompt() &&
                      request.resource.data.userId == request.auth.uid &&
                      (request.resource.data.sharing != 'team' || request.resource.data.teamId == request.auth.token.teamId);
      
      // Update rule - only owner can update
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      isValidPrompt() &&
                      request.resource.data.userId == request.auth.uid && // Can't change ownership
                      (request.resource.data.sharing != 'team' || request.resource.data.teamId == request.auth.token.teamId);
      
      // Delete rule - only owner can delete
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}